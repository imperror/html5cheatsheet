// API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const API_KEY = 'f4710e14d9ac17c0136681b456163947'; // –î–æ–¥–∞–π—Ç–µ –≤–∞—à API –∫–ª—é—á –∑ openweathermap.org
const API_BASE_URL = 'https://api.openweathermap.org/data/2.5';

// –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
const cityInput = document.getElementById('cityInput');
const searchBtn = document.getElementById('searchBtn');
const cityName = document.getElementById('cityName');
const currentTemp = document.getElementById('currentTemp');
const currentIcon = document.getElementById('currentIcon');
const weatherDesc = document.getElementById('weatherDesc');
const feelsLike = document.getElementById('feelsLike');
const humidity = document.getElementById('humidity');
const windSpeed = document.getElementById('windSpeed');
const pressure = document.getElementById('pressure');
const forecastContainer = document.getElementById('forecastContainer');

// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ç
const mockData = {
    '–∫–∏—ó–≤': {
        city: '–ö–∏—ó–≤',
        temperature: 22,
        description: '–°–æ–Ω—è—á–Ω–æ',
        icon: '‚òÄÔ∏è',
        feelsLike: 25,
        humidity: 60,
        windSpeed: 5,
        pressure: 1013,
        forecast: [
            { day: '–°—å–æ–≥–æ–¥–Ω—ñ', icon: '‚òÄÔ∏è', high: 25, low: 18 },
            { day: '–ó–∞–≤—Ç—Ä–∞', icon: '‚õÖ', high: 23, low: 16 },
            { day: '–ü–Ω', icon: 'üåßÔ∏è', high: 20, low: 14 },
            { day: '–í—Ç', icon: '‚õàÔ∏è', high: 18, low: 12 },
            { day: '–°—Ä', icon: 'üå§Ô∏è', high: 21, low: 15 },
            { day: '–ß—Ç', icon: '‚òÄÔ∏è', high: 24, low: 17 },
            { day: '–ü—Ç', icon: '‚õÖ', high: 22, low: 16 }
        ]
    },
    '–ª—å–≤—ñ–≤': {
        city: '–õ—å–≤—ñ–≤',
        temperature: 18,
        description: '–•–º–∞—Ä–Ω–æ',
        icon: '‚òÅÔ∏è',
        feelsLike: 20,
        humidity: 75,
        windSpeed: 3,
        pressure: 1008,
        forecast: [
            { day: '–°—å–æ–≥–æ–¥–Ω—ñ', icon: '‚òÅÔ∏è', high: 20, low: 12 },
            { day: '–ó–∞–≤—Ç—Ä–∞', icon: 'üåßÔ∏è', high: 17, low: 10 },
            { day: '–ü–Ω', icon: '‚õàÔ∏è', high: 15, low: 8 },
            { day: '–í—Ç', icon: 'üå§Ô∏è', high: 19, low: 11 },
            { day: '–°—Ä', icon: '‚òÄÔ∏è', high: 22, low: 14 },
            { day: '–ß—Ç', icon: '‚õÖ', high: 21, low: 13 },
            { day: '–ü—Ç', icon: '‚òÅÔ∏è', high: 18, low: 12 }
        ]
    },
    '–æ–¥–µ—Å–∞': {
        city: '–û–¥–µ—Å–∞',
        temperature: 26,
        description: '–Ø—Å–Ω–æ',
        icon: 'üåû',
        feelsLike: 28,
        humidity: 45,
        windSpeed: 8,
        pressure: 1015,
        forecast: [
            { day: '–°—å–æ–≥–æ–¥–Ω—ñ', icon: 'üåû', high: 28, low: 22 },
            { day: '–ó–∞–≤—Ç—Ä–∞', icon: '‚òÄÔ∏è', high: 27, low: 21 },
            { day: '–ü–Ω', icon: 'üå§Ô∏è', high: 25, low: 19 },
            { day: '–í—Ç', icon: '‚õÖ', high: 24, low: 18 },
            { day: '–°—Ä', icon: '‚òÄÔ∏è', high: 26, low: 20 },
            { day: '–ß—Ç', icon: 'üåû', high: 29, low: 23 },
            { day: '–ü—Ç', icon: '‚òÄÔ∏è', high: 27, low: 21 }
        ]
    },
    '—Ö–∞—Ä–∫—ñ–≤': {
        city: '–•–∞—Ä–∫—ñ–≤',
        temperature: 19,
        description: '–ü–µ—Ä–µ–≤–∞–∂–Ω–æ —Ö–º–∞—Ä–Ω–æ',
        icon: '‚õÖ',
        feelsLike: 21,
        humidity: 65,
        windSpeed: 4,
        pressure: 1010,
        forecast: [
            { day: '–°—å–æ–≥–æ–¥–Ω—ñ', icon: '‚õÖ', high: 21, low: 15 },
            { day: '–ó–∞–≤—Ç—Ä–∞', icon: '‚òÅÔ∏è', high: 19, low: 13 },
            { day: '–ü–Ω', icon: 'üåßÔ∏è', high: 17, low: 11 },
            { day: '–í—Ç', icon: 'üå§Ô∏è', high: 20, low: 14 },
            { day: '–°—Ä', icon: '‚òÄÔ∏è', high: 23, low: 16 },
            { day: '–ß—Ç', icon: '‚õÖ', high: 22, low: 15 },
            { day: '–ü—Ç', icon: '‚òÅÔ∏è', high: 20, low: 14 }
        ]
    },
    '–¥–Ω—ñ–ø—Ä–æ': {
        city: '–î–Ω—ñ–ø—Ä–æ',
        temperature: 24,
        description: '–°–æ–Ω—è—á–Ω–æ',
        icon: '‚òÄÔ∏è',
        feelsLike: 26,
        humidity: 50,
        windSpeed: 6,
        pressure: 1014,
        forecast: [
            { day: '–°—å–æ–≥–æ–¥–Ω—ñ', icon: '‚òÄÔ∏è', high: 26, low: 19 },
            { day: '–ó–∞–≤—Ç—Ä–∞', icon: 'üå§Ô∏è', high: 24, low: 17 },
            { day: '–ü–Ω', icon: '‚õÖ', high: 22, low: 15 },
            { day: '–í—Ç', icon: 'üåßÔ∏è', high: 19, low: 13 },
            { day: '–°—Ä', icon: '‚õàÔ∏è', high: 17, low: 11 },
            { day: '–ß—Ç', icon: 'üå§Ô∏è', high: 21, low: 14 },
            { day: '–ü—Ç', icon: '‚òÄÔ∏è', high: 25, low: 18 }
        ]
    }
};

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showMessage(message, type = 'info') {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const existingMessages = document.querySelectorAll('.message');
    existingMessages.forEach(msg => msg.remove());
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = message;
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const header = document.querySelector('.header');
    header.parentNode.insertBefore(messageDiv, header.nextSibling);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function showLoading() {
    const weatherContent = document.querySelector('.weather-content');
    weatherContent.classList.add('loading');
    
    cityName.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
    currentTemp.textContent = '--';
    weatherDesc.textContent = '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...';
    currentIcon.textContent = '‚è≥';
}

// –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function hideLoading() {
    const weatherContent = document.querySelector('.weather-content');
    weatherContent.classList.remove('loading');
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏
function updateWeather(data) {
    hideLoading();
    
    // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–æ—è–≤–∏
    const weatherContent = document.querySelector('.weather-content');
    weatherContent.classList.add('fade-in');
    
    cityName.textContent = data.city;
    currentTemp.textContent = data.temperature;
    currentIcon.textContent = data.icon;
    weatherDesc.textContent = data.description;
    feelsLike.textContent = `${data.feelsLike}¬∞C`;
    humidity.textContent = `${data.humidity}%`;
    windSpeed.textContent = `${data.windSpeed} –º/—Å`;
    pressure.textContent = `${data.pressure} –≥–ü–∞`;
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É
    forecastContainer.innerHTML = '';
    data.forecast.forEach((day, index) => {
        const dayElement = document.createElement('div');
        dayElement.className = 'forecast-day fade-in';
        dayElement.style.animationDelay = `${index * 0.1}s`;
        dayElement.innerHTML = `
            <div class="day-name">${day.day}</div>
            <div class="day-icon">${day.icon}</div>
            <div class="day-temps">
                <span class="high">${day.high}¬∞</span>
                <span class="low">${day.low}¬∞</span>
            </div>
        `;
        forecastContainer.appendChild(dayElement);
    });
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    setTimeout(() => {
        weatherContent.classList.remove('fade-in');
    }, 1000);
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –∑ API
async function fetchWeatherData(city) {
    try {
        showLoading();
        
        // –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞
        const currentResponse = await fetch(
            `${API_BASE_URL}/weather?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric&lang=uk`
        );
        
        if (!currentResponse.ok) {
            if (currentResponse.status === 404) {
                throw new Error('–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            } else if (currentResponse.status === 401) {
                throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á');
            } else {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        }
        
        const currentData = await currentResponse.json();
        
        // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤ (–∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏)
        const forecastResponse = await fetch(
            `${API_BASE_URL}/forecast?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric&lang=uk`
        );
        
        if (!forecastResponse.ok) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑');
        }
        
        const forecastData = await forecastResponse.json();
        
        // –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
        const weatherData = processWeatherData(currentData, forecastData);
        updateWeather(weatherData);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —É—Å–ø—ñ—à–Ω–µ –º—ñ—Å—Ç–æ
        localStorage.setItem('lastCity', city);
        
        showMessage(`–ü–æ–≥–æ–¥–∞ –¥–ª—è ${weatherData.city} –æ–Ω–æ–≤–ª–µ–Ω–∞`, 'success');
        
    } catch (error) {
        hideLoading();
        console.error('Weather API Error:', error);
        showMessage(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`, 'error');
        
        // –Ø–∫—â–æ API –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–∫–∞–∑—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        const mockCity = city.toLowerCase();
        if (mockData[mockCity]) {
            updateWeather(mockData[mockCity]);
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ API
function processWeatherData(current, forecast) {
    // –ö–∞—Ä—Ç–∞ —ñ–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥–∏
    const weatherIcons = {
        '01d': '‚òÄÔ∏è', '01n': 'üåô',
        '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
        '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
        '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
        '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
        '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
        '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
        '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
        '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
    };
    
    // –î–Ω—ñ —Ç–∏–∂–Ω—è
    const days = ['–ù–¥', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    
    // –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É
    const processedForecast = [];
    
    // –î–æ–¥–∞—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
    processedForecast.push({
        day: '–°—å–æ–≥–æ–¥–Ω—ñ',
        icon: weatherIcons[current.weather[0].icon] || 'üå§Ô∏è',
        high: Math.round(current.main.temp_max),
        low: Math.round(current.main.temp_min)
    });
    
    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ –¥–Ω—è—Ö
    const dailyForecasts = {};
    const today = new Date().toDateString();
    
    forecast.list.forEach(item => {
        const date = new Date(item.dt * 1000);
        const dateKey = date.toDateString();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –¥–∞–Ω—ñ
        if (dateKey === today) return;
        
        if (!dailyForecasts[dateKey]) {
            dailyForecasts[dateKey] = {
                temps: [],
                icons: [],
                date: date
            };
        }
        
        dailyForecasts[dateKey].temps.push(item.main.temp);
        dailyForecasts[dateKey].icons.push(item.weather[0].icon);
    });
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ
    const sortedDates = Object.keys(dailyForecasts).sort();
    sortedDates.slice(0, 6).forEach((dateKey, index) => {
        const dayData = dailyForecasts[dateKey];
        const date = dayData.date;
        const dayName = index === 0 ? '–ó–∞–≤—Ç—Ä–∞' : days[date.getDay()];
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É —ñ–∫–æ–Ω–∫—É –∑–∞ –¥–µ–Ω—å
        const iconCounts = {};
        dayData.icons.forEach(icon => {
            iconCounts[icon] = (iconCounts[icon] || 0) + 1;
        });
        const mostFrequentIcon = Object.keys(iconCounts).reduce((a, b) => 
            iconCounts[a] > iconCounts[b] ? a : b
        );
        
        processedForecast.push({
            day: dayName,
            icon: weatherIcons[mostFrequentIcon] || 'üå§Ô∏è',
            high: Math.round(Math.max(...dayData.temps)),
            low: Math.round(Math.min(...dayData.temps))
        });
    });
    
    return {
        city: current.name,
        temperature: Math.round(current.main.temp),
        description: current.weather[0].description,
        icon: weatherIcons[current.weather[0].icon] || 'üå§Ô∏è',
        feelsLike: Math.round(current.main.feels_like),
        humidity: current.main.humidity,
        windSpeed: Math.round(current.wind ? current.wind.speed : 0),
        pressure: current.main.pressure,
        forecast: processedForecast
    };
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –º—ñ—Å—Ç–∞
function searchCity() {
    const city = cityInput.value.trim();
    
    if (!city) {
        showMessage('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞!', 'error');
        return;
    }
    
    // –Ø–∫—â–æ API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API
    if (API_KEY && API_KEY !== '') {
        fetchWeatherData(city);
    } else {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        const mockCity = city.toLowerCase();
        if (mockData[mockCity]) {
            updateWeather(mockData[mockCity]);
        } else {
            showMessage('–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ: –ö–∏—ó–≤, –õ—å–≤—ñ–≤, –û–¥–µ—Å–∞, –•–∞—Ä–∫—ñ–≤, –î–Ω—ñ–ø—Ä–æ', 'error');
        }
    }
    
    cityInput.value = '';
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é
function getCurrentLocationWeather() {
    if (!navigator.geolocation) {
        showMessage('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
        return;
    }
    
    showLoading();
    showMessage('–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è...', 'info');
    
    navigator.geolocation.getCurrentPosition(
        async (position) => {
            const { latitude, longitude } = position.coords;
            
            if (API_KEY && API_KEY !== '') {
                try {
                    const response = await fetch(
                        `${API_BASE_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=uk`
                    );
                    
                    if (!response.ok) {
                        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ');
                    }
                    
                    const data = await response.json();
                    cityInput.value = data.name;
                    fetchWeatherData(data.name);
                } catch (error) {
                    hideLoading();
                    showMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è', 'error');
                }
            } else {
                hideLoading();
                updateWeather(mockData['–∫–∏—ó–≤']);
            }
        },
        (error) => {
            hideLoading();
            let errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –¥–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤–∏—á–µ—Ä–ø–∞–Ω–æ';
                    break;
            }
            
            showMessage(errorMessage, 'error');
        },
        {
            timeout: 10000,
            enableHighAccuracy: true,
            maximumAge: 300000 // 5 —Ö–≤–∏–ª–∏–Ω
        }
    );
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
searchBtn.addEventListener('click', searchCity);

cityInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        searchCity();
    }
});

// –ê–Ω—ñ–º–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫
searchBtn.addEventListener('mousedown', () => {
    searchBtn.style.transform = 'scale(0.95)';
});

searchBtn.addEventListener('mouseup', () => {
    searchBtn.style.transform = 'scale(1)';
});

// –ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º—ñ—Å—Ç (–±–æ–Ω—É—Å)
const ukrainianCities = [
    '–ö–∏—ó–≤', '–õ—å–≤—ñ–≤', '–û–¥–µ—Å–∞', '–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ö—Ä–∏–≤–∏–π –†—ñ–≥',
    '–ú–∏–∫–æ–ª–∞—ó–≤', '–ú–∞—Ä—ñ—É–ø–æ–ª—å', '–í—ñ–Ω–Ω–∏—Ü—è', '–•–µ—Ä—Å–æ–Ω', '–ü–æ–ª—Ç–∞–≤–∞', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤',
    '–ß–µ—Ä–∫–∞—Å–∏', '–ñ–∏—Ç–æ–º–∏—Ä', '–°—É–º–∏', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ', '–†—ñ–≤–Ω–µ',
    '–ö—Ä–µ–º–µ–Ω—á—É–∫', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å', '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–õ—É—Ü—å–∫', '–ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞'
];

cityInput.addEventListener('input', (e) => {
    const value = e.target.value.toLowerCase();
    if (value.length > 1) {
        const suggestions = ukrainianCities.filter(city => 
            city.toLowerCase().includes(value)
        );
        
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ dropdown –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏
        if (suggestions.length > 0) {
            cityInput.title = `–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: ${suggestions.slice(0, 5).join(', ')}`;
        }
    }
});

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—ñ—Å—Ç–∞
function loadLastCity() {
    const lastCity = localStorage.getItem('lastCity');
    if (lastCity) {
        cityInput.value = lastCity;
        searchCity();
    } else {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ö–∏—î–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        updateWeather(mockData['–∫–∏—ó–≤']);
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –º—ñ—Å—Ç–æ –∞–±–æ –ö–∏—ó–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    loadLastCity();
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ JavaScript
window.addEventListener('error', (e) => {
    console.error('JavaScript Error:', e.error);
    showMessage('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.', 'error');
});

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        processWeatherData,
        updateWeather,
        searchCity
    };
}